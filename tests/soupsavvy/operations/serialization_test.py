"""Module containing tests for serialization operations."""

import pytest

import soupsavvy.exceptions as exc
from soupsavvy.operations.serialization import JSON
from tests.soupsavvy.conftest import MockIntOperation

ERROR = "error"


class MockObject:
    """A mock object for testing purposes. Implements a json method."""

    def __init__(self, field1: str, field2: str):
        self.field1 = field1
        self.field2 = field2

    def json(self) -> dict:
        """Returns a dictionary representation of the object."""
        if self.field1 == ERROR:
            raise Exception("Mock error during serialization")

        return {"field1": self.field1, "field2": self.field2}


@pytest.fixture
def json_operation() -> JSON:
    """Fixture for JSON serialization operation."""
    return JSON()


class TestJSON:
    """Tests for JSON serialization operation."""

    def test_serializes_object_using_its_json_method(self, json_operation: JSON):
        """
        Test if JSON serialization returns dictionary generated by object's json method
        if class of object implements expected protocol.
        """
        instance = MockObject(field1="value1", field2="value2")
        result = json_operation.execute(instance)
        expected = {"field1": "value1", "field2": "value2"}
        assert result == expected == instance.json()

    def test_raises_exception_on_error(self, json_operation: JSON):
        """
        Test if JSON serialization propagates exception raised during serialization
        and FailedOperationExecution is raised by BaseOperation.
        """
        instance = MockObject(field1=ERROR, field2="value2")

        with pytest.raises(exc.FailedOperationExecution):
            json_operation.execute(instance)

    def test_raises_exception_when_method_does_not_exist(self, json_operation: JSON):
        """
        Test if JSON serialization propagates AttributeError when json method
        does not exist on the object and FailedOperationExecution is raised
        by BaseOperation.
        """
        instance = "string"

        with pytest.raises(exc.FailedOperationExecution):
            json_operation.execute(instance)

    def test_equality(self):
        """
        Test equality of JSON operation instances.
        Only any two JSON instances are equal.
        """
        op1 = JSON()
        op2 = JSON()
        assert op1 == op2

    @pytest.mark.parametrize(
        argnames="other",
        argvalues=["string", MockIntOperation()],
        ids=["string", "different_operation"],
    )
    def test_inequality(self, other, json_operation: JSON):
        """Test inequality of JSON operation with different type."""
        assert json_operation != other

    @pytest.mark.parametrize(
        argnames="other",
        argvalues=["string", MockIntOperation()],
        ids=["string", "different_operation"],
    )
    def test_equality_check_returns_not_implemented(self, other, json_operation: JSON):
        """Tests if equality check returns NotImplemented for non comparable types."""
        result = json_operation.__eq__(other)
        assert result is NotImplemented
